/*
 * This file is generated by jOOQ.
*/
package com.anzoo_anzoom.database.information_schema.tables;


import com.anzoo_anzoom.database.information_schema.InformationSchema;
import com.anzoo_anzoom.database.information_schema.tables.records.KeyCachesRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KeyCaches extends TableImpl<KeyCachesRecord> {

    private static final long serialVersionUID = 1254831314;

    /**
     * The reference instance of <code>information_schema.KEY_CACHES</code>
     */
    public static final KeyCaches KEY_CACHES = new KeyCaches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KeyCachesRecord> getRecordType() {
        return KeyCachesRecord.class;
    }

    /**
     * The column <code>information_schema.KEY_CACHES.KEY_CACHE_NAME</code>.
     */
    public final TableField<KeyCachesRecord, String> KEY_CACHE_NAME = createField("KEY_CACHE_NAME", org.jooq.impl.SQLDataType.VARCHAR(192).nullable(false).defaultValue(org.jooq.impl.DSL.inline("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.SEGMENTS</code>.
     */
    public final TableField<KeyCachesRecord, UInteger> SEGMENTS = createField("SEGMENTS", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.SEGMENT_NUMBER</code>.
     */
    public final TableField<KeyCachesRecord, UInteger> SEGMENT_NUMBER = createField("SEGMENT_NUMBER", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.FULL_SIZE</code>.
     */
    public final TableField<KeyCachesRecord, ULong> FULL_SIZE = createField("FULL_SIZE", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.BLOCK_SIZE</code>.
     */
    public final TableField<KeyCachesRecord, ULong> BLOCK_SIZE = createField("BLOCK_SIZE", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.USED_BLOCKS</code>.
     */
    public final TableField<KeyCachesRecord, ULong> USED_BLOCKS = createField("USED_BLOCKS", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.UNUSED_BLOCKS</code>.
     */
    public final TableField<KeyCachesRecord, ULong> UNUSED_BLOCKS = createField("UNUSED_BLOCKS", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.DIRTY_BLOCKS</code>.
     */
    public final TableField<KeyCachesRecord, ULong> DIRTY_BLOCKS = createField("DIRTY_BLOCKS", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.READ_REQUESTS</code>.
     */
    public final TableField<KeyCachesRecord, ULong> READ_REQUESTS = createField("READ_REQUESTS", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.READS</code>.
     */
    public final TableField<KeyCachesRecord, ULong> READS = createField("READS", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.WRITE_REQUESTS</code>.
     */
    public final TableField<KeyCachesRecord, ULong> WRITE_REQUESTS = createField("WRITE_REQUESTS", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.KEY_CACHES.WRITES</code>.
     */
    public final TableField<KeyCachesRecord, ULong> WRITES = createField("WRITES", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * Create a <code>information_schema.KEY_CACHES</code> table reference
     */
    public KeyCaches() {
        this(DSL.name("KEY_CACHES"), null);
    }

    /**
     * Create an aliased <code>information_schema.KEY_CACHES</code> table reference
     */
    public KeyCaches(String alias) {
        this(DSL.name(alias), KEY_CACHES);
    }

    /**
     * Create an aliased <code>information_schema.KEY_CACHES</code> table reference
     */
    public KeyCaches(Name alias) {
        this(alias, KEY_CACHES);
    }

    private KeyCaches(Name alias, Table<KeyCachesRecord> aliased) {
        this(alias, aliased, null);
    }

    private KeyCaches(Name alias, Table<KeyCachesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KeyCaches as(String alias) {
        return new KeyCaches(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KeyCaches as(Name alias) {
        return new KeyCaches(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public KeyCaches rename(String name) {
        return new KeyCaches(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KeyCaches rename(Name name) {
        return new KeyCaches(name, null);
    }
}
