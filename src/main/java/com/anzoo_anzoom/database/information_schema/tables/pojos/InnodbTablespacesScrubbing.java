/*
 * This file is generated by jOOQ.
*/
package com.anzoo_anzoom.database.information_schema.tables.pojos;


import java.io.Serializable;
import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbTablespacesScrubbing implements Serializable {

    private static final long serialVersionUID = 1022473980;

    private ULong     space;
    private String    name;
    private UInteger  compressed;
    private Timestamp lastScrubCompleted;
    private Timestamp currentScrubStarted;
    private UInteger  currentScrubActiveThreads;
    private ULong     currentScrubPageNumber;
    private ULong     currentScrubMaxPageNumber;
    private UInteger  rotatingOrFlushing;

    public InnodbTablespacesScrubbing() {}

    public InnodbTablespacesScrubbing(InnodbTablespacesScrubbing value) {
        this.space = value.space;
        this.name = value.name;
        this.compressed = value.compressed;
        this.lastScrubCompleted = value.lastScrubCompleted;
        this.currentScrubStarted = value.currentScrubStarted;
        this.currentScrubActiveThreads = value.currentScrubActiveThreads;
        this.currentScrubPageNumber = value.currentScrubPageNumber;
        this.currentScrubMaxPageNumber = value.currentScrubMaxPageNumber;
        this.rotatingOrFlushing = value.rotatingOrFlushing;
    }

    public InnodbTablespacesScrubbing(
        ULong     space,
        String    name,
        UInteger  compressed,
        Timestamp lastScrubCompleted,
        Timestamp currentScrubStarted,
        UInteger  currentScrubActiveThreads,
        ULong     currentScrubPageNumber,
        ULong     currentScrubMaxPageNumber,
        UInteger  rotatingOrFlushing
    ) {
        this.space = space;
        this.name = name;
        this.compressed = compressed;
        this.lastScrubCompleted = lastScrubCompleted;
        this.currentScrubStarted = currentScrubStarted;
        this.currentScrubActiveThreads = currentScrubActiveThreads;
        this.currentScrubPageNumber = currentScrubPageNumber;
        this.currentScrubMaxPageNumber = currentScrubMaxPageNumber;
        this.rotatingOrFlushing = rotatingOrFlushing;
    }

    public ULong getSpace() {
        return this.space;
    }

    public void setSpace(ULong space) {
        this.space = space;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public UInteger getCompressed() {
        return this.compressed;
    }

    public void setCompressed(UInteger compressed) {
        this.compressed = compressed;
    }

    public Timestamp getLastScrubCompleted() {
        return this.lastScrubCompleted;
    }

    public void setLastScrubCompleted(Timestamp lastScrubCompleted) {
        this.lastScrubCompleted = lastScrubCompleted;
    }

    public Timestamp getCurrentScrubStarted() {
        return this.currentScrubStarted;
    }

    public void setCurrentScrubStarted(Timestamp currentScrubStarted) {
        this.currentScrubStarted = currentScrubStarted;
    }

    public UInteger getCurrentScrubActiveThreads() {
        return this.currentScrubActiveThreads;
    }

    public void setCurrentScrubActiveThreads(UInteger currentScrubActiveThreads) {
        this.currentScrubActiveThreads = currentScrubActiveThreads;
    }

    public ULong getCurrentScrubPageNumber() {
        return this.currentScrubPageNumber;
    }

    public void setCurrentScrubPageNumber(ULong currentScrubPageNumber) {
        this.currentScrubPageNumber = currentScrubPageNumber;
    }

    public ULong getCurrentScrubMaxPageNumber() {
        return this.currentScrubMaxPageNumber;
    }

    public void setCurrentScrubMaxPageNumber(ULong currentScrubMaxPageNumber) {
        this.currentScrubMaxPageNumber = currentScrubMaxPageNumber;
    }

    public UInteger getRotatingOrFlushing() {
        return this.rotatingOrFlushing;
    }

    public void setRotatingOrFlushing(UInteger rotatingOrFlushing) {
        this.rotatingOrFlushing = rotatingOrFlushing;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("InnodbTablespacesScrubbing (");

        sb.append(space);
        sb.append(", ").append(name);
        sb.append(", ").append(compressed);
        sb.append(", ").append(lastScrubCompleted);
        sb.append(", ").append(currentScrubStarted);
        sb.append(", ").append(currentScrubActiveThreads);
        sb.append(", ").append(currentScrubPageNumber);
        sb.append(", ").append(currentScrubMaxPageNumber);
        sb.append(", ").append(rotatingOrFlushing);

        sb.append(")");
        return sb.toString();
    }
}
