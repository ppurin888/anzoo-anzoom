/*
 * This file is generated by jOOQ.
*/
package com.anzoo_anzoom.database.information_schema.tables.records;


import com.anzoo_anzoom.database.information_schema.tables.ClientStatistics;

import javax.annotation.Generated;

import org.jooq.impl.TableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientStatisticsRecord extends TableRecordImpl<ClientStatisticsRecord> {

    private static final long serialVersionUID = 998059879;

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.CLIENT</code>.
     */
    public void setClient(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.CLIENT</code>.
     */
    public String getClient() {
        return (String) get(0);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.TOTAL_CONNECTIONS</code>.
     */
    public void setTotalConnections(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.TOTAL_CONNECTIONS</code>.
     */
    public Long getTotalConnections() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.CONCURRENT_CONNECTIONS</code>.
     */
    public void setConcurrentConnections(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.CONCURRENT_CONNECTIONS</code>.
     */
    public Long getConcurrentConnections() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.CONNECTED_TIME</code>.
     */
    public void setConnectedTime(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.CONNECTED_TIME</code>.
     */
    public Long getConnectedTime() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.BUSY_TIME</code>.
     */
    public void setBusyTime(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.BUSY_TIME</code>.
     */
    public Double getBusyTime() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.CPU_TIME</code>.
     */
    public void setCpuTime(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.CPU_TIME</code>.
     */
    public Double getCpuTime() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.BYTES_RECEIVED</code>.
     */
    public void setBytesReceived(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.BYTES_RECEIVED</code>.
     */
    public Long getBytesReceived() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.BYTES_SENT</code>.
     */
    public void setBytesSent(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.BYTES_SENT</code>.
     */
    public Long getBytesSent() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.BINLOG_BYTES_WRITTEN</code>.
     */
    public void setBinlogBytesWritten(Long value) {
        set(8, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.BINLOG_BYTES_WRITTEN</code>.
     */
    public Long getBinlogBytesWritten() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.ROWS_READ</code>.
     */
    public void setRowsRead(Long value) {
        set(9, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.ROWS_READ</code>.
     */
    public Long getRowsRead() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.ROWS_SENT</code>.
     */
    public void setRowsSent(Long value) {
        set(10, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.ROWS_SENT</code>.
     */
    public Long getRowsSent() {
        return (Long) get(10);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.ROWS_DELETED</code>.
     */
    public void setRowsDeleted(Long value) {
        set(11, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.ROWS_DELETED</code>.
     */
    public Long getRowsDeleted() {
        return (Long) get(11);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.ROWS_INSERTED</code>.
     */
    public void setRowsInserted(Long value) {
        set(12, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.ROWS_INSERTED</code>.
     */
    public Long getRowsInserted() {
        return (Long) get(12);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.ROWS_UPDATED</code>.
     */
    public void setRowsUpdated(Long value) {
        set(13, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.ROWS_UPDATED</code>.
     */
    public Long getRowsUpdated() {
        return (Long) get(13);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.SELECT_COMMANDS</code>.
     */
    public void setSelectCommands(Long value) {
        set(14, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.SELECT_COMMANDS</code>.
     */
    public Long getSelectCommands() {
        return (Long) get(14);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.UPDATE_COMMANDS</code>.
     */
    public void setUpdateCommands(Long value) {
        set(15, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.UPDATE_COMMANDS</code>.
     */
    public Long getUpdateCommands() {
        return (Long) get(15);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.OTHER_COMMANDS</code>.
     */
    public void setOtherCommands(Long value) {
        set(16, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.OTHER_COMMANDS</code>.
     */
    public Long getOtherCommands() {
        return (Long) get(16);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.COMMIT_TRANSACTIONS</code>.
     */
    public void setCommitTransactions(Long value) {
        set(17, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.COMMIT_TRANSACTIONS</code>.
     */
    public Long getCommitTransactions() {
        return (Long) get(17);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.ROLLBACK_TRANSACTIONS</code>.
     */
    public void setRollbackTransactions(Long value) {
        set(18, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.ROLLBACK_TRANSACTIONS</code>.
     */
    public Long getRollbackTransactions() {
        return (Long) get(18);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.DENIED_CONNECTIONS</code>.
     */
    public void setDeniedConnections(Long value) {
        set(19, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.DENIED_CONNECTIONS</code>.
     */
    public Long getDeniedConnections() {
        return (Long) get(19);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.LOST_CONNECTIONS</code>.
     */
    public void setLostConnections(Long value) {
        set(20, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.LOST_CONNECTIONS</code>.
     */
    public Long getLostConnections() {
        return (Long) get(20);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.ACCESS_DENIED</code>.
     */
    public void setAccessDenied(Long value) {
        set(21, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.ACCESS_DENIED</code>.
     */
    public Long getAccessDenied() {
        return (Long) get(21);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.EMPTY_QUERIES</code>.
     */
    public void setEmptyQueries(Long value) {
        set(22, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.EMPTY_QUERIES</code>.
     */
    public Long getEmptyQueries() {
        return (Long) get(22);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.TOTAL_SSL_CONNECTIONS</code>.
     */
    public void setTotalSslConnections(ULong value) {
        set(23, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.TOTAL_SSL_CONNECTIONS</code>.
     */
    public ULong getTotalSslConnections() {
        return (ULong) get(23);
    }

    /**
     * Setter for <code>information_schema.CLIENT_STATISTICS.MAX_STATEMENT_TIME_EXCEEDED</code>.
     */
    public void setMaxStatementTimeExceeded(Long value) {
        set(24, value);
    }

    /**
     * Getter for <code>information_schema.CLIENT_STATISTICS.MAX_STATEMENT_TIME_EXCEEDED</code>.
     */
    public Long getMaxStatementTimeExceeded() {
        return (Long) get(24);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ClientStatisticsRecord
     */
    public ClientStatisticsRecord() {
        super(ClientStatistics.CLIENT_STATISTICS);
    }

    /**
     * Create a detached, initialised ClientStatisticsRecord
     */
    public ClientStatisticsRecord(String client, Long totalConnections, Long concurrentConnections, Long connectedTime, Double busyTime, Double cpuTime, Long bytesReceived, Long bytesSent, Long binlogBytesWritten, Long rowsRead, Long rowsSent, Long rowsDeleted, Long rowsInserted, Long rowsUpdated, Long selectCommands, Long updateCommands, Long otherCommands, Long commitTransactions, Long rollbackTransactions, Long deniedConnections, Long lostConnections, Long accessDenied, Long emptyQueries, ULong totalSslConnections, Long maxStatementTimeExceeded) {
        super(ClientStatistics.CLIENT_STATISTICS);

        set(0, client);
        set(1, totalConnections);
        set(2, concurrentConnections);
        set(3, connectedTime);
        set(4, busyTime);
        set(5, cpuTime);
        set(6, bytesReceived);
        set(7, bytesSent);
        set(8, binlogBytesWritten);
        set(9, rowsRead);
        set(10, rowsSent);
        set(11, rowsDeleted);
        set(12, rowsInserted);
        set(13, rowsUpdated);
        set(14, selectCommands);
        set(15, updateCommands);
        set(16, otherCommands);
        set(17, commitTransactions);
        set(18, rollbackTransactions);
        set(19, deniedConnections);
        set(20, lostConnections);
        set(21, accessDenied);
        set(22, emptyQueries);
        set(23, totalSslConnections);
        set(24, maxStatementTimeExceeded);
    }
}
