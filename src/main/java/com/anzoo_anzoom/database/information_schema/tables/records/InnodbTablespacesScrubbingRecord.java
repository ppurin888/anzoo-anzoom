/*
 * This file is generated by jOOQ.
*/
package com.anzoo_anzoom.database.information_schema.tables.records;


import com.anzoo_anzoom.database.information_schema.tables.InnodbTablespacesScrubbing;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.TableRecordImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InnodbTablespacesScrubbingRecord extends TableRecordImpl<InnodbTablespacesScrubbingRecord> implements Record9<ULong, String, UInteger, Timestamp, Timestamp, UInteger, ULong, ULong, UInteger> {

    private static final long serialVersionUID = -2006914865;

    /**
     * Setter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.SPACE</code>.
     */
    public void setSpace(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.SPACE</code>.
     */
    public ULong getSpace() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.NAME</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.NAME</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.COMPRESSED</code>.
     */
    public void setCompressed(UInteger value) {
        set(2, value);
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.COMPRESSED</code>.
     */
    public UInteger getCompressed() {
        return (UInteger) get(2);
    }

    /**
     * Setter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.LAST_SCRUB_COMPLETED</code>.
     */
    public void setLastScrubCompleted(Timestamp value) {
        set(3, value);
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.LAST_SCRUB_COMPLETED</code>.
     */
    public Timestamp getLastScrubCompleted() {
        return (Timestamp) get(3);
    }

    /**
     * Setter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.CURRENT_SCRUB_STARTED</code>.
     */
    public void setCurrentScrubStarted(Timestamp value) {
        set(4, value);
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.CURRENT_SCRUB_STARTED</code>.
     */
    public Timestamp getCurrentScrubStarted() {
        return (Timestamp) get(4);
    }

    /**
     * Setter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.CURRENT_SCRUB_ACTIVE_THREADS</code>.
     */
    public void setCurrentScrubActiveThreads(UInteger value) {
        set(5, value);
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.CURRENT_SCRUB_ACTIVE_THREADS</code>.
     */
    public UInteger getCurrentScrubActiveThreads() {
        return (UInteger) get(5);
    }

    /**
     * Setter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.CURRENT_SCRUB_PAGE_NUMBER</code>.
     */
    public void setCurrentScrubPageNumber(ULong value) {
        set(6, value);
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.CURRENT_SCRUB_PAGE_NUMBER</code>.
     */
    public ULong getCurrentScrubPageNumber() {
        return (ULong) get(6);
    }

    /**
     * Setter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.CURRENT_SCRUB_MAX_PAGE_NUMBER</code>.
     */
    public void setCurrentScrubMaxPageNumber(ULong value) {
        set(7, value);
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.CURRENT_SCRUB_MAX_PAGE_NUMBER</code>.
     */
    public ULong getCurrentScrubMaxPageNumber() {
        return (ULong) get(7);
    }

    /**
     * Setter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.ROTATING_OR_FLUSHING</code>.
     */
    public void setRotatingOrFlushing(UInteger value) {
        set(8, value);
    }

    /**
     * Getter for <code>information_schema.INNODB_TABLESPACES_SCRUBBING.ROTATING_OR_FLUSHING</code>.
     */
    public UInteger getRotatingOrFlushing() {
        return (UInteger) get(8);
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row9<ULong, String, UInteger, Timestamp, Timestamp, UInteger, ULong, ULong, UInteger> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row9<ULong, String, UInteger, Timestamp, Timestamp, UInteger, ULong, ULong, UInteger> valuesRow() {
        return (Row9) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ULong> field1() {
        return InnodbTablespacesScrubbing.INNODB_TABLESPACES_SCRUBBING.SPACE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return InnodbTablespacesScrubbing.INNODB_TABLESPACES_SCRUBBING.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field3() {
        return InnodbTablespacesScrubbing.INNODB_TABLESPACES_SCRUBBING.COMPRESSED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field4() {
        return InnodbTablespacesScrubbing.INNODB_TABLESPACES_SCRUBBING.LAST_SCRUB_COMPLETED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field5() {
        return InnodbTablespacesScrubbing.INNODB_TABLESPACES_SCRUBBING.CURRENT_SCRUB_STARTED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field6() {
        return InnodbTablespacesScrubbing.INNODB_TABLESPACES_SCRUBBING.CURRENT_SCRUB_ACTIVE_THREADS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ULong> field7() {
        return InnodbTablespacesScrubbing.INNODB_TABLESPACES_SCRUBBING.CURRENT_SCRUB_PAGE_NUMBER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ULong> field8() {
        return InnodbTablespacesScrubbing.INNODB_TABLESPACES_SCRUBBING.CURRENT_SCRUB_MAX_PAGE_NUMBER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field9() {
        return InnodbTablespacesScrubbing.INNODB_TABLESPACES_SCRUBBING.ROTATING_OR_FLUSHING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong component1() {
        return getSpace();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger component3() {
        return getCompressed();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component4() {
        return getLastScrubCompleted();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component5() {
        return getCurrentScrubStarted();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger component6() {
        return getCurrentScrubActiveThreads();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong component7() {
        return getCurrentScrubPageNumber();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong component8() {
        return getCurrentScrubMaxPageNumber();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger component9() {
        return getRotatingOrFlushing();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong value1() {
        return getSpace();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value3() {
        return getCompressed();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value4() {
        return getLastScrubCompleted();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value5() {
        return getCurrentScrubStarted();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value6() {
        return getCurrentScrubActiveThreads();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong value7() {
        return getCurrentScrubPageNumber();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong value8() {
        return getCurrentScrubMaxPageNumber();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value9() {
        return getRotatingOrFlushing();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InnodbTablespacesScrubbingRecord value1(ULong value) {
        setSpace(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InnodbTablespacesScrubbingRecord value2(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InnodbTablespacesScrubbingRecord value3(UInteger value) {
        setCompressed(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InnodbTablespacesScrubbingRecord value4(Timestamp value) {
        setLastScrubCompleted(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InnodbTablespacesScrubbingRecord value5(Timestamp value) {
        setCurrentScrubStarted(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InnodbTablespacesScrubbingRecord value6(UInteger value) {
        setCurrentScrubActiveThreads(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InnodbTablespacesScrubbingRecord value7(ULong value) {
        setCurrentScrubPageNumber(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InnodbTablespacesScrubbingRecord value8(ULong value) {
        setCurrentScrubMaxPageNumber(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InnodbTablespacesScrubbingRecord value9(UInteger value) {
        setRotatingOrFlushing(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public InnodbTablespacesScrubbingRecord values(ULong value1, String value2, UInteger value3, Timestamp value4, Timestamp value5, UInteger value6, ULong value7, ULong value8, UInteger value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached InnodbTablespacesScrubbingRecord
     */
    public InnodbTablespacesScrubbingRecord() {
        super(InnodbTablespacesScrubbing.INNODB_TABLESPACES_SCRUBBING);
    }

    /**
     * Create a detached, initialised InnodbTablespacesScrubbingRecord
     */
    public InnodbTablespacesScrubbingRecord(ULong space, String name, UInteger compressed, Timestamp lastScrubCompleted, Timestamp currentScrubStarted, UInteger currentScrubActiveThreads, ULong currentScrubPageNumber, ULong currentScrubMaxPageNumber, UInteger rotatingOrFlushing) {
        super(InnodbTablespacesScrubbing.INNODB_TABLESPACES_SCRUBBING);

        set(0, space);
        set(1, name);
        set(2, compressed);
        set(3, lastScrubCompleted);
        set(4, currentScrubStarted);
        set(5, currentScrubActiveThreads);
        set(6, currentScrubPageNumber);
        set(7, currentScrubMaxPageNumber);
        set(8, rotatingOrFlushing);
    }
}
