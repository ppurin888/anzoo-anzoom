/*
 * This file is generated by jOOQ.
*/
package com.anzoo_anzoom.database.information_schema.tables;


import com.anzoo_anzoom.database.information_schema.InformationSchema;
import com.anzoo_anzoom.database.information_schema.tables.records.PartitionsRecord;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Partitions extends TableImpl<PartitionsRecord> {

    private static final long serialVersionUID = -2040400946;

    /**
     * The reference instance of <code>information_schema.PARTITIONS</code>
     */
    public static final Partitions PARTITIONS = new Partitions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartitionsRecord> getRecordType() {
        return PartitionsRecord.class;
    }

    /**
     * The column <code>information_schema.PARTITIONS.TABLE_CATALOG</code>.
     */
    public final TableField<PartitionsRecord, String> TABLE_CATALOG = createField("TABLE_CATALOG", org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false).defaultValue(org.jooq.impl.DSL.inline("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.TABLE_SCHEMA</code>.
     */
    public final TableField<PartitionsRecord, String> TABLE_SCHEMA = createField("TABLE_SCHEMA", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.TABLE_NAME</code>.
     */
    public final TableField<PartitionsRecord, String> TABLE_NAME = createField("TABLE_NAME", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false).defaultValue(org.jooq.impl.DSL.inline("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.PARTITION_NAME</code>.
     */
    public final TableField<PartitionsRecord, String> PARTITION_NAME = createField("PARTITION_NAME", org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.SUBPARTITION_NAME</code>.
     */
    public final TableField<PartitionsRecord, String> SUBPARTITION_NAME = createField("SUBPARTITION_NAME", org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.PARTITION_ORDINAL_POSITION</code>.
     */
    public final TableField<PartitionsRecord, ULong> PARTITION_ORDINAL_POSITION = createField("PARTITION_ORDINAL_POSITION", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.SUBPARTITION_ORDINAL_POSITION</code>.
     */
    public final TableField<PartitionsRecord, ULong> SUBPARTITION_ORDINAL_POSITION = createField("SUBPARTITION_ORDINAL_POSITION", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.PARTITION_METHOD</code>.
     */
    public final TableField<PartitionsRecord, String> PARTITION_METHOD = createField("PARTITION_METHOD", org.jooq.impl.SQLDataType.VARCHAR(18).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.SUBPARTITION_METHOD</code>.
     */
    public final TableField<PartitionsRecord, String> SUBPARTITION_METHOD = createField("SUBPARTITION_METHOD", org.jooq.impl.SQLDataType.VARCHAR(12).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.PARTITION_EXPRESSION</code>.
     */
    public final TableField<PartitionsRecord, String> PARTITION_EXPRESSION = createField("PARTITION_EXPRESSION", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.SUBPARTITION_EXPRESSION</code>.
     */
    public final TableField<PartitionsRecord, String> SUBPARTITION_EXPRESSION = createField("SUBPARTITION_EXPRESSION", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.PARTITION_DESCRIPTION</code>.
     */
    public final TableField<PartitionsRecord, String> PARTITION_DESCRIPTION = createField("PARTITION_DESCRIPTION", org.jooq.impl.SQLDataType.CLOB.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.TABLE_ROWS</code>.
     */
    public final TableField<PartitionsRecord, ULong> TABLE_ROWS = createField("TABLE_ROWS", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.AVG_ROW_LENGTH</code>.
     */
    public final TableField<PartitionsRecord, ULong> AVG_ROW_LENGTH = createField("AVG_ROW_LENGTH", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.DATA_LENGTH</code>.
     */
    public final TableField<PartitionsRecord, ULong> DATA_LENGTH = createField("DATA_LENGTH", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.MAX_DATA_LENGTH</code>.
     */
    public final TableField<PartitionsRecord, ULong> MAX_DATA_LENGTH = createField("MAX_DATA_LENGTH", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.INDEX_LENGTH</code>.
     */
    public final TableField<PartitionsRecord, ULong> INDEX_LENGTH = createField("INDEX_LENGTH", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.DATA_FREE</code>.
     */
    public final TableField<PartitionsRecord, ULong> DATA_FREE = createField("DATA_FREE", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.CREATE_TIME</code>.
     */
    public final TableField<PartitionsRecord, Timestamp> CREATE_TIME = createField("CREATE_TIME", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.UPDATE_TIME</code>.
     */
    public final TableField<PartitionsRecord, Timestamp> UPDATE_TIME = createField("UPDATE_TIME", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.CHECK_TIME</code>.
     */
    public final TableField<PartitionsRecord, Timestamp> CHECK_TIME = createField("CHECK_TIME", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.CHECKSUM</code>.
     */
    public final TableField<PartitionsRecord, ULong> CHECKSUM = createField("CHECKSUM", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.PARTITION_COMMENT</code>.
     */
    public final TableField<PartitionsRecord, String> PARTITION_COMMENT = createField("PARTITION_COMMENT", org.jooq.impl.SQLDataType.VARCHAR(80).nullable(false).defaultValue(org.jooq.impl.DSL.inline("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.NODEGROUP</code>.
     */
    public final TableField<PartitionsRecord, String> NODEGROUP = createField("NODEGROUP", org.jooq.impl.SQLDataType.VARCHAR(12).nullable(false).defaultValue(org.jooq.impl.DSL.inline("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>information_schema.PARTITIONS.TABLESPACE_NAME</code>.
     */
    public final TableField<PartitionsRecord, String> TABLESPACE_NAME = createField("TABLESPACE_NAME", org.jooq.impl.SQLDataType.VARCHAR(64).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>information_schema.PARTITIONS</code> table reference
     */
    public Partitions() {
        this(DSL.name("PARTITIONS"), null);
    }

    /**
     * Create an aliased <code>information_schema.PARTITIONS</code> table reference
     */
    public Partitions(String alias) {
        this(DSL.name(alias), PARTITIONS);
    }

    /**
     * Create an aliased <code>information_schema.PARTITIONS</code> table reference
     */
    public Partitions(Name alias) {
        this(alias, PARTITIONS);
    }

    private Partitions(Name alias, Table<PartitionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Partitions(Name alias, Table<PartitionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Partitions as(String alias) {
        return new Partitions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Partitions as(Name alias) {
        return new Partitions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Partitions rename(String name) {
        return new Partitions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Partitions rename(Name name) {
        return new Partitions(name, null);
    }
}
