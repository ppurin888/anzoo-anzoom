/*
 * This file is generated by jOOQ.
*/
package com.anzoo_anzoom.database.information_schema.tables.pojos;


import java.io.Serializable;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SystemVariables implements Serializable {

    private static final long serialVersionUID = -390872965;

    private String variableName;
    private String sessionValue;
    private String globalValue;
    private String globalValueOrigin;
    private String defaultValue;
    private String variableScope;
    private String variableType;
    private String variableComment;
    private String numericMinValue;
    private String numericMaxValue;
    private String numericBlockSize;
    private String enumValueList;
    private String readOnly;
    private String commandLineArgument;

    public SystemVariables() {}

    public SystemVariables(SystemVariables value) {
        this.variableName = value.variableName;
        this.sessionValue = value.sessionValue;
        this.globalValue = value.globalValue;
        this.globalValueOrigin = value.globalValueOrigin;
        this.defaultValue = value.defaultValue;
        this.variableScope = value.variableScope;
        this.variableType = value.variableType;
        this.variableComment = value.variableComment;
        this.numericMinValue = value.numericMinValue;
        this.numericMaxValue = value.numericMaxValue;
        this.numericBlockSize = value.numericBlockSize;
        this.enumValueList = value.enumValueList;
        this.readOnly = value.readOnly;
        this.commandLineArgument = value.commandLineArgument;
    }

    public SystemVariables(
        String variableName,
        String sessionValue,
        String globalValue,
        String globalValueOrigin,
        String defaultValue,
        String variableScope,
        String variableType,
        String variableComment,
        String numericMinValue,
        String numericMaxValue,
        String numericBlockSize,
        String enumValueList,
        String readOnly,
        String commandLineArgument
    ) {
        this.variableName = variableName;
        this.sessionValue = sessionValue;
        this.globalValue = globalValue;
        this.globalValueOrigin = globalValueOrigin;
        this.defaultValue = defaultValue;
        this.variableScope = variableScope;
        this.variableType = variableType;
        this.variableComment = variableComment;
        this.numericMinValue = numericMinValue;
        this.numericMaxValue = numericMaxValue;
        this.numericBlockSize = numericBlockSize;
        this.enumValueList = enumValueList;
        this.readOnly = readOnly;
        this.commandLineArgument = commandLineArgument;
    }

    public String getVariableName() {
        return this.variableName;
    }

    public void setVariableName(String variableName) {
        this.variableName = variableName;
    }

    public String getSessionValue() {
        return this.sessionValue;
    }

    public void setSessionValue(String sessionValue) {
        this.sessionValue = sessionValue;
    }

    public String getGlobalValue() {
        return this.globalValue;
    }

    public void setGlobalValue(String globalValue) {
        this.globalValue = globalValue;
    }

    public String getGlobalValueOrigin() {
        return this.globalValueOrigin;
    }

    public void setGlobalValueOrigin(String globalValueOrigin) {
        this.globalValueOrigin = globalValueOrigin;
    }

    public String getDefaultValue() {
        return this.defaultValue;
    }

    public void setDefaultValue(String defaultValue) {
        this.defaultValue = defaultValue;
    }

    public String getVariableScope() {
        return this.variableScope;
    }

    public void setVariableScope(String variableScope) {
        this.variableScope = variableScope;
    }

    public String getVariableType() {
        return this.variableType;
    }

    public void setVariableType(String variableType) {
        this.variableType = variableType;
    }

    public String getVariableComment() {
        return this.variableComment;
    }

    public void setVariableComment(String variableComment) {
        this.variableComment = variableComment;
    }

    public String getNumericMinValue() {
        return this.numericMinValue;
    }

    public void setNumericMinValue(String numericMinValue) {
        this.numericMinValue = numericMinValue;
    }

    public String getNumericMaxValue() {
        return this.numericMaxValue;
    }

    public void setNumericMaxValue(String numericMaxValue) {
        this.numericMaxValue = numericMaxValue;
    }

    public String getNumericBlockSize() {
        return this.numericBlockSize;
    }

    public void setNumericBlockSize(String numericBlockSize) {
        this.numericBlockSize = numericBlockSize;
    }

    public String getEnumValueList() {
        return this.enumValueList;
    }

    public void setEnumValueList(String enumValueList) {
        this.enumValueList = enumValueList;
    }

    public String getReadOnly() {
        return this.readOnly;
    }

    public void setReadOnly(String readOnly) {
        this.readOnly = readOnly;
    }

    public String getCommandLineArgument() {
        return this.commandLineArgument;
    }

    public void setCommandLineArgument(String commandLineArgument) {
        this.commandLineArgument = commandLineArgument;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SystemVariables (");

        sb.append(variableName);
        sb.append(", ").append(sessionValue);
        sb.append(", ").append(globalValue);
        sb.append(", ").append(globalValueOrigin);
        sb.append(", ").append(defaultValue);
        sb.append(", ").append(variableScope);
        sb.append(", ").append(variableType);
        sb.append(", ").append(variableComment);
        sb.append(", ").append(numericMinValue);
        sb.append(", ").append(numericMaxValue);
        sb.append(", ").append(numericBlockSize);
        sb.append(", ").append(enumValueList);
        sb.append(", ").append(readOnly);
        sb.append(", ").append(commandLineArgument);

        sb.append(")");
        return sb.toString();
    }
}
