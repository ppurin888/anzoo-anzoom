/*
 * This file is generated by jOOQ.
*/
package com.anzoo_anzoom.database.anzoo_anzoom.tables;


import com.anzoo_anzoom.database.anzoo_anzoom.AnzooAnzoom;
import com.anzoo_anzoom.database.anzoo_anzoom.Indexes;
import com.anzoo_anzoom.database.anzoo_anzoom.Keys;
import com.anzoo_anzoom.database.anzoo_anzoom.tables.records.UserPasswordEncryptionTypesRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserPasswordEncryptionTypes extends TableImpl<UserPasswordEncryptionTypesRecord> {

    private static final long serialVersionUID = 1312202252;

    /**
     * The reference instance of <code>anzoo_anzoom.user_password_encryption_types</code>
     */
    public static final UserPasswordEncryptionTypes USER_PASSWORD_ENCRYPTION_TYPES = new UserPasswordEncryptionTypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserPasswordEncryptionTypesRecord> getRecordType() {
        return UserPasswordEncryptionTypesRecord.class;
    }

    /**
     * The column <code>anzoo_anzoom.user_password_encryption_types.id</code>.
     */
    public final TableField<UserPasswordEncryptionTypesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>anzoo_anzoom.user_password_encryption_types.type_name</code>.
     */
    public final TableField<UserPasswordEncryptionTypesRecord, String> TYPE_NAME = createField("type_name", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>anzoo_anzoom.user_password_encryption_types.secret_key</code>.
     */
    public final TableField<UserPasswordEncryptionTypesRecord, byte[]> SECRET_KEY = createField("secret_key", org.jooq.impl.SQLDataType.BINARY(64).nullable(false), this, "");

    /**
     * The column <code>anzoo_anzoom.user_password_encryption_types.title</code>.
     */
    public final TableField<UserPasswordEncryptionTypesRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>anzoo_anzoom.user_password_encryption_types.created_at</code>.
     */
    public final TableField<UserPasswordEncryptionTypesRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>anzoo_anzoom.user_password_encryption_types.deleted_at</code>.
     */
    public final TableField<UserPasswordEncryptionTypesRecord, Timestamp> DELETED_AT = createField("deleted_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>anzoo_anzoom.user_password_encryption_types</code> table reference
     */
    public UserPasswordEncryptionTypes() {
        this(DSL.name("user_password_encryption_types"), null);
    }

    /**
     * Create an aliased <code>anzoo_anzoom.user_password_encryption_types</code> table reference
     */
    public UserPasswordEncryptionTypes(String alias) {
        this(DSL.name(alias), USER_PASSWORD_ENCRYPTION_TYPES);
    }

    /**
     * Create an aliased <code>anzoo_anzoom.user_password_encryption_types</code> table reference
     */
    public UserPasswordEncryptionTypes(Name alias) {
        this(alias, USER_PASSWORD_ENCRYPTION_TYPES);
    }

    private UserPasswordEncryptionTypes(Name alias, Table<UserPasswordEncryptionTypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserPasswordEncryptionTypes(Name alias, Table<UserPasswordEncryptionTypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return AnzooAnzoom.ANZOO_ANZOOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_PASSWORD_ENCRYPTION_TYPES_PRIMARY, Indexes.USER_PASSWORD_ENCRYPTION_TYPES_USER_PASSWORD_ENCRYPTION_TYPES_TYPE_NAME_SECRET_KEY_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserPasswordEncryptionTypesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_PASSWORD_ENCRYPTION_TYPES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserPasswordEncryptionTypesRecord> getPrimaryKey() {
        return Keys.KEY_USER_PASSWORD_ENCRYPTION_TYPES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserPasswordEncryptionTypesRecord>> getKeys() {
        return Arrays.<UniqueKey<UserPasswordEncryptionTypesRecord>>asList(Keys.KEY_USER_PASSWORD_ENCRYPTION_TYPES_PRIMARY, Keys.KEY_USER_PASSWORD_ENCRYPTION_TYPES_USER_PASSWORD_ENCRYPTION_TYPES_TYPE_NAME_SECRET_KEY_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserPasswordEncryptionTypes as(String alias) {
        return new UserPasswordEncryptionTypes(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserPasswordEncryptionTypes as(Name alias) {
        return new UserPasswordEncryptionTypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPasswordEncryptionTypes rename(String name) {
        return new UserPasswordEncryptionTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPasswordEncryptionTypes rename(Name name) {
        return new UserPasswordEncryptionTypes(name, null);
    }
}
