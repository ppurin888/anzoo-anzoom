/*
 * This file is generated by jOOQ.
*/
package com.anzoo_anzoom.database.anzoo_anzoom.tables;


import com.anzoo_anzoom.database.anzoo_anzoom.AnzooAnzoom;
import com.anzoo_anzoom.database.anzoo_anzoom.Indexes;
import com.anzoo_anzoom.database.anzoo_anzoom.Keys;
import com.anzoo_anzoom.database.anzoo_anzoom.tables.records.AuthenticationAccessTokensRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthenticationAccessTokens extends TableImpl<AuthenticationAccessTokensRecord> {

    private static final long serialVersionUID = -1985418541;

    /**
     * The reference instance of <code>anzoo_anzoom.authentication_access_tokens</code>
     */
    public static final AuthenticationAccessTokens AUTHENTICATION_ACCESS_TOKENS = new AuthenticationAccessTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthenticationAccessTokensRecord> getRecordType() {
        return AuthenticationAccessTokensRecord.class;
    }

    /**
     * The column <code>anzoo_anzoom.authentication_access_tokens.id</code>.
     */
    public final TableField<AuthenticationAccessTokensRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>anzoo_anzoom.authentication_access_tokens.user_id</code>.
     */
    public final TableField<AuthenticationAccessTokensRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>anzoo_anzoom.authentication_access_tokens.access_token</code>.
     */
    public final TableField<AuthenticationAccessTokensRecord, String> ACCESS_TOKEN = createField("access_token", org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>anzoo_anzoom.authentication_access_tokens.expired_at</code>.
     */
    public final TableField<AuthenticationAccessTokensRecord, Timestamp> EXPIRED_AT = createField("expired_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>anzoo_anzoom.authentication_access_tokens.created_at</code>.
     */
    public final TableField<AuthenticationAccessTokensRecord, Timestamp> CREATED_AT = createField("created_at", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>anzoo_anzoom.authentication_access_tokens.deleted_at</code>.
     */
    public final TableField<AuthenticationAccessTokensRecord, Timestamp> DELETED_AT = createField("deleted_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>anzoo_anzoom.authentication_access_tokens</code> table reference
     */
    public AuthenticationAccessTokens() {
        this(DSL.name("authentication_access_tokens"), null);
    }

    /**
     * Create an aliased <code>anzoo_anzoom.authentication_access_tokens</code> table reference
     */
    public AuthenticationAccessTokens(String alias) {
        this(DSL.name(alias), AUTHENTICATION_ACCESS_TOKENS);
    }

    /**
     * Create an aliased <code>anzoo_anzoom.authentication_access_tokens</code> table reference
     */
    public AuthenticationAccessTokens(Name alias) {
        this(alias, AUTHENTICATION_ACCESS_TOKENS);
    }

    private AuthenticationAccessTokens(Name alias, Table<AuthenticationAccessTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthenticationAccessTokens(Name alias, Table<AuthenticationAccessTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return AnzooAnzoom.ANZOO_ANZOOM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AUTHENTICATION_ACCESS_TOKENS_AUTHENTICATION_ACCESS_TOKENS_AUTH_ID_ACCESS_TOKEN_UINDEX, Indexes.AUTHENTICATION_ACCESS_TOKENS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AuthenticationAccessTokensRecord, Integer> getIdentity() {
        return Keys.IDENTITY_AUTHENTICATION_ACCESS_TOKENS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AuthenticationAccessTokensRecord> getPrimaryKey() {
        return Keys.KEY_AUTHENTICATION_ACCESS_TOKENS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AuthenticationAccessTokensRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthenticationAccessTokensRecord>>asList(Keys.KEY_AUTHENTICATION_ACCESS_TOKENS_PRIMARY, Keys.KEY_AUTHENTICATION_ACCESS_TOKENS_AUTHENTICATION_ACCESS_TOKENS_AUTH_ID_ACCESS_TOKEN_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AuthenticationAccessTokensRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AuthenticationAccessTokensRecord, ?>>asList(Keys.AUTHENTICATION_ACCESS_TOKENS_USERS_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthenticationAccessTokens as(String alias) {
        return new AuthenticationAccessTokens(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AuthenticationAccessTokens as(Name alias) {
        return new AuthenticationAccessTokens(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthenticationAccessTokens rename(String name) {
        return new AuthenticationAccessTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthenticationAccessTokens rename(Name name) {
        return new AuthenticationAccessTokens(name, null);
    }
}
